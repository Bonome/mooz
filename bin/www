#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mb:server');
var http = require('http');
const events = require('events');

var routes = require('../routes');
var destination = require('../routes/destination');
var move = require('../routes/move');
var remove = require('../routes/remove');
var refresh = require('../routes/refresh');
var scan = require('../routes/scan');
var downpath = require('../routes/downpath.js');
var list = require('../routes/list.js');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3333');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

    var eventEmitter = new events.EventEmitter();
app.use(function(req, res, next) {
        console.log('add io on fly');
        req.io = io;
        req.emitter = eventEmitter;
        next();
});



app.use('/', routes);
app.use('/destination', destination);
app.use('/move', move);
app.use('/remove', remove);
app.use('/refresh', refresh);
app.use('/scan', scan);
app.use('/down', downpath);
app.use('/dirs', list);


io.on('connection', function(client) {
    client.on('disconnect', function() {
        console.log("disconnected")
    });
    
    client.on('room', function(data) {
        console.log(data);
        client.join(data.roomId);
        console.log(' Client joined the room and client id is '+ client.id);

    });
    client.on('toBackEnd', function(data) {
        client.in(data.roomId).emit('message', data);
    });

    client.on('moved', (data) => { // occurs when an event is thrown
        console.log('moved ok in server.js');
        client.in('temp').emit('message', data);
    });
    eventEmitter.on('moved', (data) => { // occurs when an event is thrown
        console.log('emit from socket');
        client.in('temp').emit('message', data);
    });
    console.log('socket connection');
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
